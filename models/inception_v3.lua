
require 'cudnn'
require 'cunn'


function inception_module(mixed_id, input_size, config)
  local std_epsilon = 0.0010000000475
  local layer_id = mixed_id
  local mixed = nn.DepthConcat(2)
  if layer_id == 1 or layer_id == 2 or layer_id == 3 then
    -- inception 1
    local mixed_conv = nn.Sequential()
    -- valid
    mixed_conv:add(cudnn.SpatialConvolution(input_size, config[1][1], 1, 1, 1, 1, 0, 0))
    mixed_conv:add(nn.SpatialBatchNormalization(config[1][1], std_epsilon, nil, true))
    mixed_conv:add(cudnn.ReLU(true))
    local mixed_tower_conv = nn.Sequential()
    mixed_tower_conv:add(cudnn.SpatialConvolution(input_size, config[2][1], 1, 1, 1, 1, 0, 0))
    mixed_tower_conv:add(nn.SpatialBatchNormalization(config[2][1], std_epsilon, nil, true))
    mixed_tower_conv:add(cudnn.ReLU(true))
    mixed_tower_conv:add(cudnn.SpatialConvolution(config[2][1], config[2][2], 5, 5, 1, 1, 2, 2))
    mixed_tower_conv:add(nn.SpatialBatchNormalization(config[2][2], std_epsilon, nil, true))
    mixed_tower_conv:add(cudnn.ReLU(true))
    local mixed_tower_1_conv = nn.Sequential()
    mixed_tower_1_conv:add(cudnn.SpatialConvolution(input_size, config[3][1], 1, 1, 1, 1, 0, 0))
    mixed_tower_1_conv:add(nn.SpatialBatchNormalization(config[3][1], std_epsilon, nil, true))
    mixed_tower_1_conv:add(cudnn.ReLU(true))
    mixed_tower_1_conv:add(cudnn.SpatialConvolution(config[3][1], config[3][2], 3, 3, 1, 1, 1, 1))
    mixed_tower_1_conv:add(nn.SpatialBatchNormalization(config[3][2], std_epsilon, nil, true))
    mixed_tower_1_conv:add(cudnn.ReLU(true))
    mixed_tower_1_conv:add(cudnn.SpatialConvolution(config[3][2], config[3][3], 3, 3, 1, 1, 1, 1))
    mixed_tower_1_conv:add(nn.SpatialBatchNormalization(config[3][3], std_epsilon, nil, true))
    mixed_tower_1_conv:add(cudnn.ReLU(true))
    local mixed_tower_2_conv_pool = nn.Sequential()
    mixed_tower_2_conv_pool:add(cudnn.SpatialAveragePooling(3, 3, 1, 1, 1, 1))
    mixed_tower_2_conv_pool:add(cudnn.SpatialConvolution(input_size, config[4][1], 1, 1, 1, 1, 0, 0))
    mixed_tower_2_conv_pool:add(nn.SpatialBatchNormalization(config[4][1], std_epsilon, nil, true))
    mixed_tower_2_conv_pool:add(cudnn.ReLU(true))
    mixed:add(mixed_conv)
    mixed:add(mixed_tower_conv)
    mixed:add(mixed_tower_1_conv)
    mixed:add(mixed_tower_2_conv_pool)
  elseif layer_id == 4 then
    local mixed_conv = nn.Sequential()
    mixed_conv:add(cudnn.SpatialConvolution(input_size, config[1][1], 3, 3, 2, 2, 0, 0))
    mixed_conv:add(nn.SpatialBatchNormalization(config[1][1], std_epsilon, nil, true))
    mixed_conv:add(cudnn.ReLU(true))
    local mixed_tower_1_conv = nn.Sequential()
    mixed_tower_1_conv:add(cudnn.SpatialConvolution(input_size, config[2][1], 1, 1, 1, 1, 0, 0))
    mixed_tower_1_conv:add(nn.SpatialBatchNormalization(config[2][1], std_epsilon, nil, true))
    mixed_tower_1_conv:add(cudnn.ReLU(true))
    mixed_tower_1_conv:add(cudnn.SpatialConvolution(config[2][1], config[2][2], 3, 3, 1, 1, 1, 1))
    mixed_tower_1_conv:add(nn.SpatialBatchNormalization(config[2][2], std_epsilon, nil, true))
    mixed_tower_1_conv:add(cudnn.ReLU(true))
    mixed_tower_1_conv:add(cudnn.SpatialConvolution(config[2][2], config[2][3], 3, 3, 2, 2, 0, 0))
    mixed_tower_1_conv:add(nn.SpatialBatchNormalization(config[2][3], std_epsilon, nil, true))
    mixed_tower_1_conv:add(cudnn.ReLU(true))
    local mixed_pool = nn.Sequential()
    mixed_pool:add(cudnn.SpatialMaxPooling(3, 3, 2, 2, 0, 0))
    mixed:add(mixed_conv)
    mixed:add(mixed_tower_1_conv)
    mixed:add(mixed_pool)
  elseif layer_id == 5 or layer_id == 6 or layer_id == 7 or layer_id == 8 then
    local mixed_conv = nn.Sequential()
    mixed_conv:add(cudnn.SpatialConvolution(input_size, config[1][1], 1, 1, 1, 1, 0, 0))
    mixed_conv:add(nn.SpatialBatchNormalization(config[1][1], std_epsilon, nil, true))
    mixed_conv:add(cudnn.ReLU(true))
    local mixed_tower_conv = nn.Sequential()
    mixed_tower_conv:add(cudnn.SpatialConvolution(input_size, config[2][1], 7, 1, 1, 1, 3, 0))
    mixed_tower_conv:add(nn.SpatialBatchNormalization(config[2][1], std_epsilon, nil, true))
    mixed_tower_conv:add(cudnn.ReLU(true))
    mixed_tower_conv:add(cudnn.SpatialConvolution(config[2][1], config[2][2], 1, 7, 1, 1, 0, 3))
    mixed_tower_conv:add(nn.SpatialBatchNormalization(config[2][2], std_epsilon, nil, true))
    mixed_tower_conv:add(cudnn.ReLU(true))
    local mixed_tower_1_conv = nn.Sequential()
    mixed_tower_1_conv:add(cudnn.SpatialConvolution(input_size, config[3][1], 1, 1, 1, 1, 0, 0))
    mixed_tower_1_conv:add(nn.SpatialBatchNormalization(config[3][1], std_epsilon, nil, true))
    mixed_tower_1_conv:add(cudnn.ReLU(true))
    mixed_tower_1_conv:add(cudnn.SpatialConvolution(config[3][1], config[3][2], 1, 7, 1, 1, 0, 3))
    mixed_tower_1_conv:add(nn.SpatialBatchNormalization(config[3][2], std_epsilon, nil, true))
    mixed_tower_1_conv:add(cudnn.ReLU(true))
    mixed_tower_1_conv:add(cudnn.SpatialConvolution(config[3][2], config[3][3], 7, 1, 1, 1, 3, 0))
    mixed_tower_1_conv:add(nn.SpatialBatchNormalization(config[3][3], std_epsilon, nil, true))
    mixed_tower_1_conv:add(cudnn.ReLU(true))
    mixed_tower_1_conv:add(cudnn.SpatialConvolution(config[3][3], config[3][4], 1, 7, 1, 1, 0, 3))
    mixed_tower_1_conv:add(nn.SpatialBatchNormalization(config[3][4], std_epsilon, nil, true))
    mixed_tower_1_conv:add(cudnn.ReLU(true))
    mixed_tower_1_conv:add(cudnn.SpatialConvolution(config[3][4], config[3][5], 7, 1, 1, 1, 3, 0))
    mixed_tower_1_conv:add(nn.SpatialBatchNormalization(config[3][5], std_epsilon, nil, true))
    mixed_tower_1_conv:add(cudnn.ReLU(true))
    local mixed_tower_2_conv_pool = nn.Sequential()
    mixed_tower_2_conv_pool:add(cudnn.SpatialAveragePooling(3, 3, 1, 1, 1, 1))
    mixed_tower_2_conv_pool:add(cudnn.SpatialConvolution(input_size, config[4][1], 1, 1, 1, 1, 0, 0))
    mixed_tower_2_conv_pool:add(nn.SpatialBatchNormalization(config[4][1], std_epsilon, nil, true))
    mixed_tower_2_conv_pool:add(cudnn.ReLU(true))
    mixed:add(mixed_conv)
    mixed:add(mixed_tower_conv)
    mixed:add(mixed_tower_1_conv)
    mixed:add(mixed_tower_2_conv_pool)
  elseif layer_id == 9 then
    local mixed_conv = nn.Sequential()
    mixed_conv:add(cudnn.SpatialConvolution(input_size, config[1][1], 1, 1, 1, 1, 0, 0))
    mixed_conv:add(nn.SpatialBatchNormalization(config[1][1], std_epsilon, nil, true))
    mixed_conv:add(cudnn.ReLU(true))
    mixed_conv:add(cudnn.SpatialConvolution(config[1][1], config[1][2], 3, 3, 2, 2, 0, 0))
    mixed_conv:add(nn.SpatialBatchNormalization(config[1][2], std_epsilon, nil, true))
    mixed_conv:add(cudnn.ReLU(true))
    local mixed_tower_conv = nn.Sequential()
    mixed_tower_conv:add(cudnn.SpatialConvolution(input_size, config[2][1], 1, 1, 1, 1, 0, 0))
    mixed_tower_conv:add(nn.SpatialBatchNormalization(config[2][1], std_epsilon, nil, true))
    mixed_tower_conv:add(cudnn.ReLU(true))
    mixed_tower_conv:add(cudnn.SpatialConvolution(config[2][1], config[2][2], 7, 1, 1, 1, 3, 0))
    mixed_tower_conv:add(nn.SpatialBatchNormalization(config[2][2], std_epsilon, nil, true))
    mixed_tower_conv:add(cudnn.ReLU(true))
    mixed_tower_conv:add(cudnn.SpatialConvolution(config[2][2], config[2][3], 1, 7, 1, 1, 0, 3))
    mixed_tower_conv:add(nn.SpatialBatchNormalization(config[2][3], std_epsilon, nil, true))
    mixed_tower_conv:add(cudnn.ReLU(true))
    mixed_tower_conv:add(cudnn.SpatialConvolution(config[2][3], config[2][4], 3, 3, 2, 2, 0, 0))
    mixed_tower_conv:add(nn.SpatialBatchNormalization(config[2][4], std_epsilon, nil, true))
    mixed_tower_conv:add(cudnn.ReLU(true))
    local mixed_pool = nn.Sequential()
    mixed_pool:add(cudnn.SpatialMaxPooling(3, 3, 2, 2, 0, 0))
    mixed:add(mixed_conv)
    mixed:add(mixed_tower_conv)
    mixed:add(mixed_pool)
  elseif layer_id == 10 or layer_id == 11 then
    local mixed_conv = nn.Sequential()
    mixed_conv:add(cudnn.SpatialConvolution(input_size, config[1][1], 1, 1, 1, 1, 0, 0))
    mixed_conv:add(nn.SpatialBatchNormalization(config[1][1], std_epsilon, nil, true))
    mixed_conv:add(cudnn.ReLU(true))
    local mixed_tower_conv = nn.Sequential()
    mixed_tower_conv:add(cudnn.SpatialConvolution(input_size, config[2][1], 1, 1, 1, 1, 0, 0))
    mixed_tower_conv:add(nn.SpatialBatchNormalization(config[2][1], std_epsilon, nil, true))
    mixed_tower_conv:add(cudnn.ReLU(true))
    local mixed_tower_expand = nn.Sequential()
    local mixed_expand = nn.DepthConcat(2)
    local mixed_expand_1 = nn.Sequential()
    mixed_expand_1:add(cudnn.SpatialConvolution(config[2][1], config[2][2], 3, 1, 1, 1, 1, 0))
    mixed_expand_1:add(nn.SpatialBatchNormalization(config[2][2], std_epsilon, nil, true))
    mixed_expand_1:add(cudnn.ReLU(true))
    local mixed_expand_2 = nn.Sequential()
    mixed_expand_2:add(cudnn.SpatialConvolution(config[2][1], config[2][3], 1, 3, 1, 1, 0, 1))
    mixed_expand_2:add(nn.SpatialBatchNormalization(config[2][3], std_epsilon, nil, true))
    mixed_expand_2:add(cudnn.ReLU(true))
    mixed_expand:add(mixed_expand_1)
    mixed_expand:add(mixed_expand_2)
    mixed_tower_expand:add(mixed_expand)
    mixed_tower_conv:add(mixed_tower_expand)
    local mixed_tower_1_conv = nn.Sequential()
    mixed_tower_1_conv:add(cudnn.SpatialConvolution(input_size, config[3][1], 1, 1, 1, 1, 0, 0))
    mixed_tower_1_conv:add(nn.SpatialBatchNormalization(config[3][1], std_epsilon, nil, true))
    mixed_tower_1_conv:add(cudnn.ReLU(true))
    mixed_tower_1_conv:add(cudnn.SpatialConvolution(config[3][1], config[3][2], 3, 3, 1, 1, 1, 1))
    mixed_tower_1_conv:add(nn.SpatialBatchNormalization(config[3][2], std_epsilon, nil, true))
    mixed_tower_1_conv:add(cudnn.ReLU(true))
    local mixed_tower_1_expand = nn.Sequential()
    local mixed_1_expand = nn.DepthConcat(2)
    local mixed_1_expand_1 = nn.Sequential()
    mixed_1_expand_1:add(cudnn.SpatialConvolution(config[3][2], config[3][3], 3, 1, 1, 1, 1, 0))
    mixed_1_expand_1:add(nn.SpatialBatchNormalization(config[3][3], std_epsilon, nil, true))
    mixed_1_expand_1:add(cudnn.ReLU(true))
    local mixed_1_expand_2 = nn.Sequential()
    mixed_1_expand_2:add(cudnn.SpatialConvolution(config[3][2], config[3][4], 1, 3, 1, 1, 0, 1))
    mixed_1_expand_2:add(nn.SpatialBatchNormalization(config[3][4], std_epsilon, nil, true))
    mixed_1_expand_2:add(cudnn.ReLU(true))
    mixed_1_expand:add(mixed_1_expand_1)
    mixed_1_expand:add(mixed_1_expand_2)
    mixed_tower_1_expand:add(mixed_1_expand)
    mixed_tower_1_conv:add(mixed_tower_1_expand)
    local mixed_tower_2_pool = nn.Sequential()
    mixed_tower_2_pool:add(cudnn.SpatialAveragePooling(3, 3, 1, 1, 1, 1))
    mixed_tower_2_pool:add(cudnn.SpatialConvolution(input_size, config[4][1], 1, 1, 1, 1, 0, 0))
    mixed_tower_2_pool:add(nn.SpatialBatchNormalization(config[4][1], std_epsilon, nil, true))
    mixed_tower_2_pool:add(cudnn.ReLU(true))
    mixed:add(mixed_conv)
    mixed:add(mixed_tower_conv)
    mixed:add(mixed_tower_1_conv)
    mixed:add(mixed_tower_2_pool)
  end
  return mixed
end


function createModel()

  -- 342
  local feature = nn.Sequential() 
  -- 299 valid
  feature:add(cudnn.SpatialConvolution(3, 32, 3, 3, 2, 2, 0, 0))
  feature:add(nn.SpatialBatchNormalization(32, std_epsilon, nil, true))
  feature:add(cudnn.ReLU(true))
  -- (299 - 2) / 2 = 149
  feature:add(cudnn.SpatialConvolution(32,32, 3, 3, 1, 1, 0, 0))
  feature:add(nn.SpatialBatchNormalization(32, std_epsilon, nil, true))
  feature:add(cudnn.ReLU(true))
  -- 147
  feature:add(cudnn.SpatialConvolution(32,64, 3, 3, 1, 1, 1, 1))
  feature:add(nn.SpatialBatchNormalization(64, std_epsilon, nil, true))
  feature:add(cudnn.ReLU(true))
  -- 147
  feature:add(cudnn.SpatialMaxPooling(3, 3, 2, 2, 0, 0))
  feature:add(cudnn.SpatialConvolution(64, 80, 1, 1, 1, 1, 0, 0))
  feature:add(nn.SpatialBatchNormalization(80, std_epsilon, nil, true))
  feature:add(cudnn.ReLU(true))
  feature:add(cudnn.SpatialConvolution(80, 192, 3, 3, 1, 1, 0, 0))
  feature:add(nn.SpatialBatchNormalization(192, std_epsilon, nil, true))
  feature:add(cudnn.ReLU(true))
  feature:add(cudnn.SpatialMaxPooling(3, 3, 2, 2, 0, 0))


  mixed_1 = inception_module( 1, 192, {{64 }, { 48,  64},{64, 96, 96}, {32}})
  -- 192 + 64 + 64 + 96 + 32 = 256
  mixed_2 = inception_module( 2, 256, {{64 }, { 48,  64},{64, 96, 96}, {64}})
  mixed_3 = inception_module( 3, 288, {{64 }, { 48,  64},{64, 96, 96}, {64}})
  mixed_4 = inception_module( 4, 288, {{384}, { 64,  96,  96}})
  -- 288 + 384 + 96 = 768
  mixed_5 = inception_module( 5, 768, {{192}, {128, 192}, {128, 128, 128, 128, 192}, {192}})
  mixed_6 = inception_module( 6, 768, {{192}, {160, 192}, {160, 160, 160, 160, 192}, {192}})
  mixed_7 = inception_module( 7, 768, {{192}, {160, 192}, {160, 160, 160, 160, 192}, {192}})
  mixed_8 = inception_module( 8, 768, {{192}, {192, 192}, {192, 192, 192, 192, 192}, {192}})
  mixed_9 = inception_module( 9, 768, {{192, 320}, {192, 192, 192, 192}})
  -- 768 + 320 + 192 = 1280
  mixed_10= inception_module(10,1280, {{320}, {384, 384, 384}, {448, 384, 384, 384}, {192}})
  -- 320 + (384 + 384) + (384 + 384) + 192 = 2048 
  mixed_11= inception_module(11,2048, {{320}, {384, 384, 384}, {448, 384, 384, 384}, {192}})

  feature:add(mixed_1)
  feature:add(mixed_2)
  feature:add(mixed_3)
  feature:add(mixed_4)
  feature:add(mixed_5)
  feature:add(mixed_6)
  feature:add(mixed_7)
  feature:add(mixed_8)
  feature:add(mixed_9)
  feature:add(mixed_10)
  feature:add(mixed_11)
  feature:add(cudnn.SpatialAveragePooling(8, 8, 1, 1, 0, 0))

  local classifier = nn.Sequential()
  classifier:add(nn.View(2048))
  classifier:add(nn.Linear(2048, opt.nClasses))
  classifier:add(cudnn.LogSoftMax())

  return feature, classifier
end

--[[
feature = createModel()
feature:cuda()
x = torch.CudaTensor(32, 3, 299, 299):normal()
z = feature:forward(x)
print(z:size())
print(feature:backward(x, z):size())
--]]

